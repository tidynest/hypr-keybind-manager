#!/usr/bin/env bash
# Automated test script for Phase 7.5 - tag-release.sh
# Tests release automation (git commits, tags, version bumps)

set -e  # Exit on error

# Colours for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Colour

# Test directory
TEST_REPO="/tmp/hypr-keybind-manager-release-test-$$"
SCRIPT_PATH="scripts/tag-release.sh"
SYNC_SCRIPT_PATH="scripts/sync-version.sh"

# Counters
PASSED=0
FAILED=0

print_header() {
    echo -e "\n${BLUE}========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}========================================${NC}\n"
}

print_test() {
    echo -e "${YELLOW}▶ $1${NC}"
}

print_pass() {
    echo -e "${GREEN}✅ PASS: $1${NC}"
    PASSED=$((PASSED + 1))
}

print_fail() {
    echo -e "${RED}❌ FAIL: $1${NC}"
    FAILED=$((FAILED + 1))
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Cleanup function
cleanup() {
    print_info "Cleaning up..."
    if [ -d "$TEST_REPO" ]; then
        rm -rf "$TEST_REPO"
        print_info "Test repository removed"
    fi
}

# Set trap to cleanup on exit
trap cleanup EXIT INT TERM

# Check prerequisites
print_header "Prerequisites Check"

if ! command -v git &> /dev/null; then
    print_fail "git command not found"
    exit 1
fi
print_pass "git command available"

if [ ! -f "$SCRIPT_PATH" ]; then
    print_fail "Script not found: $SCRIPT_PATH"
    exit 1
fi
print_pass "tag-release.sh script exists"

if [ ! -f "$SYNC_SCRIPT_PATH" ]; then
    print_fail "Dependency script not found: $SYNC_SCRIPT_PATH"
    exit 1
fi
print_pass "sync-version.sh script exists"

#==============================================================================
# TEST 1: Test Repository Setup
#==============================================================================
print_header "Test 1: Test Repository Setup"

print_test "Creating isolated test repository..."
mkdir -p "$TEST_REPO/scripts"
mkdir -p "$TEST_REPO/docs"
cd "$TEST_REPO"

# Initialize git repo
git init -q
git config user.name "Test User"
git config user.email "test@example.com"
print_pass "Git repository initialized"

# Copy scripts
cp "$OLDPWD/$SCRIPT_PATH" scripts/
cp "$OLDPWD/$SYNC_SCRIPT_PATH" scripts/
chmod +x scripts/*.sh
print_pass "Scripts copied to test repo"

# Create minimal Cargo.toml
cat > Cargo.toml <<'EOF'
[package]
name = "test-project"
version = "1.0.0"
edition = "2021"
EOF
print_pass "Cargo.toml created (version 1.0.0)"

# Create minimal Cargo.lock
cat > Cargo.lock <<'EOF'
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 3

[[package]]
name = "test-project"
version = "1.0.0"
EOF
print_pass "Cargo.lock created"

# Create minimal documentation files
echo -e "# README\n\n![Version](https://img.shields.io/badge/version-1.0.0-blue)" > README.md
echo -e "# Security\n\n**Version**: 1.0.0" > SECURITY.md
echo -e "# Architecture\n\n**Version**: 1.0.0" > docs/ARCHITECTURE.md
echo -e "# Design\n\n**Version**: 1.0.0" > docs/DESIGN_DECISIONS.md
print_pass "Documentation files created"

# Create minimal PKGBUILD
cat > PKGBUILD <<'EOF'
# Maintainer: Test User <test@example.com>

pkgname=test-project
pkgver=1.0.0
pkgrel=1
EOF
print_pass "PKGBUILD created"

# Initial commit
git add .
git commit -q -m "Initial commit"
print_pass "Initial commit created"

#==============================================================================
# TEST 2: Successful Release (1.0.1)
#==============================================================================
print_header "Test 2: Successful Release Flow (1.0.1)"

print_test "Running tag-release.sh 1.0.1..."
if ./scripts/tag-release.sh 1.0.1 > /tmp/tag-release-output.log 2>&1; then
    print_pass "tag-release.sh executed successfully"
else
    print_fail "tag-release.sh execution failed"
    cat /tmp/tag-release-output.log
    exit 1
fi

# Verify Cargo.toml updated
if grep -q '^version = "1.0.1"' Cargo.toml; then
    print_pass "Cargo.toml version updated to 1.0.1"
else
    print_fail "Cargo.toml version NOT updated"
    grep "^version" Cargo.toml
fi

# Verify documentation files updated
if grep -q "badge/version-1.0.1-blue" README.md; then
    print_pass "README.md badge updated to 1.0.1"
else
    print_fail "README.md badge NOT updated"
fi

if grep -q "^\*\*Version\*\*: 1.0.1" SECURITY.md; then
    print_pass "SECURITY.md version updated to 1.0.1"
else
    print_fail "SECURITY.md version NOT updated"
fi

if grep -q "^pkgver=1.0.1" PKGBUILD; then
    print_pass "PKGBUILD version updated to 1.0.1"
else
    print_fail "PKGBUILD version NOT updated"
fi

#==============================================================================
# TEST 3: Commit Verification
#==============================================================================
print_header "Test 3: Commit Verification"

print_test "Checking git commit created..."
COMMIT_MSG=$(git log -1 --pretty=%B)
if echo "$COMMIT_MSG" | grep -q "Bump version to 1.0.1"; then
    print_pass "Commit message correct: '$COMMIT_MSG'"
else
    print_fail "Commit message incorrect: '$COMMIT_MSG'"
fi

# Verify files in commit
COMMITTED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD)
if echo "$COMMITTED_FILES" | grep -q "Cargo.toml"; then
    print_pass "Cargo.toml included in commit"
else
    print_fail "Cargo.toml NOT in commit"
fi

if echo "$COMMITTED_FILES" | grep -q "README.md"; then
    print_pass "README.md included in commit"
else
    print_fail "README.md NOT in commit"
fi

if echo "$COMMITTED_FILES" | grep -q "PKGBUILD"; then
    print_pass "PKGBUILD included in commit"
else
    print_fail "PKGBUILD NOT in commit"
fi

#==============================================================================
# TEST 4: Tag Verification
#==============================================================================
print_header "Test 4: Tag Verification"

print_test "Checking git tag created..."
if git tag -l | grep -q "^v1.0.1$"; then
    print_pass "Tag v1.0.1 created"
else
    print_fail "Tag v1.0.1 NOT created"
    git tag -l
fi

# Verify tag annotation
TAG_MSG=$(git tag -l -n1 v1.0.1)
if echo "$TAG_MSG" | grep -q "Release v1.0.1"; then
    print_pass "Tag annotation correct"
else
    print_fail "Tag annotation incorrect: '$TAG_MSG'"
fi

# Verify tag points to latest commit
TAG_COMMIT=$(git rev-list -n 1 v1.0.1)
HEAD_COMMIT=$(git rev-parse HEAD)
if [ "$TAG_COMMIT" = "$HEAD_COMMIT" ]; then
    print_pass "Tag points to correct commit"
else
    print_fail "Tag points to wrong commit"
fi

#==============================================================================
# TEST 5: Edge Case - Invalid Version Format
#==============================================================================
print_header "Test 5: Edge Case - Invalid Version Format"

print_test "Testing invalid version format (1.0)..."
if ./scripts/tag-release.sh 1.0 > /tmp/tag-release-invalid.log 2>&1; then
    print_fail "Script should reject invalid version format"
else
    print_pass "Script correctly rejected invalid version"
fi

if grep -q "Invalid version format" /tmp/tag-release-invalid.log; then
    print_pass "Error message correct"
else
    print_fail "Error message missing or incorrect"
fi

print_test "Testing invalid version format (v1.0.2)..."
if ./scripts/tag-release.sh v1.0.2 > /tmp/tag-release-invalid2.log 2>&1; then
    print_fail "Script should reject version with 'v' prefix"
else
    print_pass "Script correctly rejected 'v' prefix"
fi

#==============================================================================
# TEST 6: Edge Case - Duplicate Tag
#==============================================================================
print_header "Test 6: Edge Case - Duplicate Tag Detection"

print_test "Testing duplicate tag (1.0.1 already exists)..."
if ./scripts/tag-release.sh 1.0.1 > /tmp/tag-release-duplicate.log 2>&1; then
    print_fail "Script should detect duplicate tag"
else
    print_pass "Script correctly detected duplicate tag"
fi

if grep -q "Tag v1.0.1 already exists" /tmp/tag-release-duplicate.log; then
    print_pass "Duplicate tag error message correct"
else
    print_fail "Error message missing or incorrect"
    cat /tmp/tag-release-duplicate.log
fi

#==============================================================================
# TEST 7: Edge Case - Uncommitted Changes
#==============================================================================
print_header "Test 7: Edge Case - Uncommitted Changes Detection"

# Make uncommitted change
echo "# Uncommitted change" >> README.md

print_test "Testing with uncommitted changes..."
if ./scripts/tag-release.sh 1.0.2 > /tmp/tag-release-dirty.log 2>&1; then
    print_fail "Script should detect uncommitted changes"
else
    print_pass "Script correctly detected uncommitted changes"
fi

if grep -q "You have uncommitted changes" /tmp/tag-release-dirty.log; then
    print_pass "Uncommitted changes error message correct"
else
    print_fail "Error message missing or incorrect"
fi

# Clean up uncommitted change
git checkout README.md

#==============================================================================
# TEST 8: Successful Second Release (1.0.2)
#==============================================================================
print_header "Test 8: Second Release (1.0.2)"

print_test "Running tag-release.sh 1.0.2..."
if ./scripts/tag-release.sh 1.0.2 > /tmp/tag-release-v2.log 2>&1; then
    print_pass "Second release executed successfully"
else
    print_fail "Second release failed"
    cat /tmp/tag-release-v2.log
fi

# Verify new version
if grep -q '^version = "1.0.2"' Cargo.toml; then
    print_pass "Cargo.toml updated to 1.0.2"
else
    print_fail "Cargo.toml NOT updated to 1.0.2"
fi

# Verify new tag
if git tag -l | grep -q "^v1.0.2$"; then
    print_pass "Tag v1.0.2 created"
else
    print_fail "Tag v1.0.2 NOT created"
fi

# Verify we now have 2 tags
TAG_COUNT=$(git tag -l | wc -l)
if [ "$TAG_COUNT" -eq 2 ]; then
    print_pass "Two tags exist (v1.0.1, v1.0.2)"
else
    print_fail "Expected 2 tags, found $TAG_COUNT"
fi

#==============================================================================
# TEST 9: Edge Case - No Version Argument
#==============================================================================
print_header "Test 9: Edge Case - No Version Argument"

print_test "Testing with no version argument..."
if ./scripts/tag-release.sh > /tmp/tag-release-noarg.log 2>&1; then
    print_fail "Script should require version argument"
else
    print_pass "Script correctly rejected missing argument"
fi

if grep -q "Version number required" /tmp/tag-release-noarg.log; then
    print_pass "Missing argument error message correct"
else
    print_fail "Error message missing or incorrect"
fi

#==============================================================================
# TEST 10: Git History Verification
#==============================================================================
print_header "Test 10: Git History Verification"

print_test "Verifying git history integrity..."
COMMIT_COUNT=$(git rev-list --count HEAD)
# Should have 3 commits: initial + v1.0.1 + v1.0.2
if [ "$COMMIT_COUNT" -eq 3 ]; then
    print_pass "Correct number of commits (3)"
else
    print_fail "Expected 3 commits, found $COMMIT_COUNT"
    git log --oneline
fi

# Verify commit messages
if git log --oneline | grep -q "Bump version to 1.0.2"; then
    print_pass "v1.0.2 commit message found"
else
    print_fail "v1.0.2 commit message NOT found"
fi

if git log --oneline | grep -q "Bump version to 1.0.1"; then
    print_pass "v1.0.1 commit message found"
else
    print_fail "v1.0.1 commit message NOT found"
fi

#==============================================================================
# SUMMARY
#==============================================================================
print_header "Test Summary"

cd "$OLDPWD"

TOTAL=$((PASSED + FAILED))
echo -e "${BLUE}Total Tests: $TOTAL${NC}"
echo -e "${GREEN}Passed: $PASSED${NC}"
echo -e "${RED}Failed: $FAILED${NC}"

if [ $FAILED -eq 0 ]; then
    echo -e "\n${GREEN}🎉 All tests passed!${NC}\n"
    exit 0
else
    echo -e "\n${RED}❌ Some tests failed. Check output above.${NC}\n"
    exit 1
fi
